/****************************************/
/*  Load and Prepare Data  */
/****************************************/

/*Load data into SAS*/
libname alldata xlsx "/home/sigridibara0/AllData/turnover.xlsx";
 
/* Specify macro variables */
%let char_inputs = department salary;
%let target = turnover;
%let num_inputs = satisfaction evaluation project_count average_monthly_hours
                  years_at_company work_accident promotion;  

/* Formats for categorical variables */
proc format;
    value $dfmt
        'IT'         = '1'
        'RandD'      = '2'
        'accounting' = '3'
        'hr'         = '4'
        'management' = '5'
        'marketing'  = '6'
        'product_mng'= '7'
        'sales'      = '8'
        'support'    = '9'
        'technical'  = '10';

    value $sfmt 
        'high'   = '1'
        'medium' = '2'
        'low'    = '3';
run;

/* Create dataset with cleaned names */
data _employee_turnover(rename=(
    satisfaction_level       = satisfaction
    last_evaluation          = evaluation 
    number_project           = project_count 
    average_montly_hours     = average_monthly_hours 
    time_spend_company       = years_at_company
    work_accident            = work_accident
    promotion_last_5years    = promotion
    sales                    = department
    left                     = turnover));

set alldata.turnover;
    label 
        satisfaction_level       = "satisfaction"
        last_evaluation          = "evaluation"
        number_project           = "project_count"
        average_montly_hours     = "average_monthly_hours"
        time_spend_company       = "years_at_company"
        work_accident            = "work_accident"
        promotion_last_5years    = "promotion"
        sales                    = "department"
        left                     = "turnover";
run;

/* Apply formats */
data employee_turnover;
    set _employee_turnover;
    format department $dfmt. salary $sfmt.;
run;

/* Check dataset structure */
proc contents data=employee_turnover;
run;

/* Preview first 10 rows */
proc print data=employee_turnover(obs=10);
run;

/***************************/
/*  EXPLORING THE DATA     */
/***************************/

/* Summary statistics for numeric variables */
proc means data=employee_turnover n mean std min max; 
    var &num_inputs;
run;

/* Distribution and normality checks */
proc univariate data=employee_turnover plots normal;
    histogram &num_inputs / normal;
    inset n min max mean median;
    var &num_inputs;
run;

/* Correlation with turnover */
title 'Association of predictors with turnover';
proc corr data=employee_turnover plots nosimple;
    var &num_inputs;
    with turnover;
run;

title 'Correlation of predictors';
proc corr data=employee_turnover plots nosimple;
    var &num_inputs;
run;

/* Compare satisfaction across turnover groups */
proc means data=employee_turnover;
    var satisfaction;
    class turnover;
run;

proc ttest data=employee_turnover plots=all;
    class turnover;
    var satisfaction;
run;

/* Categorical variable frequency tables */
proc freq data=employee_turnover;
    tables &char_inputs turnover / plots=freqplot;
run;

/* Crosstabulations with Chi-square */
title 'Two-way frequency table analysis';
proc freq data=employee_turnover;
    tables (&char_inputs) * turnover / chisq 
        plots=(freqplot(twoway=groupvertical scale=percent));
run;

/* Salary vs turnover */
proc freq data=employee_turnover;
    tables turnover*salary / plots=(freqplot);
run;

/* Department vs turnover */
proc freq data=employee_turnover;
    tables turnover*department / plots=(freqplot);
run;

/* Turnover vs individual numeric variables */
proc univariate data=employee_turnover plots;
    class turnover;
    var project_count evaluation average_monthly_hours satisfaction;
run;

/* Relationships between numeric features */
proc sgplot data=employee_turnover;
    vbox average_monthly_hours / category=project_count group=turnover;
run;

proc sgplot data=employee_turnover;
    vbox evaluation / category=project_count group=turnover;
run;

proc sgscatter data=employee_turnover;
    plot evaluation*satisfaction / group=turnover;
run;

proc sgplot data=employee_turnover;
    vbar years_at_company / group=turnover groupdisplay=cluster;
run;


/***************************/
/*  DIMENSION REDUCTION    */
/***************************/
proc princomp data=employee_turnover plots(only)=(scree) out=princomp_score;
run;

/***************************/
/*  K-MEANS CLUSTERING     */
/***************************/
proc fastclus data=princomp_score maxclusters=3 out=k_means_score;
    var satisfaction evaluation;
run;

proc sgplot data=k_means_score;
    scatter x=satisfaction y=evaluation / group=cluster;
run;

/***************************/
/*  FEATURE SELECTION      */
/***************************/
proc hpsplit data=employee_turnover maxdepth=6;
    class department salary;
    model turnover = &char_inputs &num_inputs;
    prune none;
run;

/***************************/
/*  TRAIN/TEST SPLIT       */
/***************************/
proc sort data=employee_turnover out=emp_turnover_sorted;
    by turnover;
run;

proc surveyselect data=emp_turnover_sorted 
    method=srs samprate=0.70 out=emp_turnover_sample seed=12345 outall;
    strata turnover;
run;

data train (drop=selected) test (drop=selected);
    set emp_turnover_sample;
    if selected = 1 then output train;
    else output test; 
run;

proc freq data=train;
    tables turnover;
run;

proc freq data=test;
    tables turnover;
run;

/***************************/
/*  LOGISTIC REGRESSION    */
/***************************/
proc logistic data=train descending plots(only maxpoints=none)=roc; 
    class department salary / param=effect ref=first;
    model turnover(event='1') = satisfaction years_at_company evaluation
        / selection=stepwise expb;
    output out=tempo p=pred_prob;
    store logistic_output;
run;

/***************************/
/*  SCORING ON TEST SET    */
/***************************/
proc plm restore=logistic_output;
    score data=test out=test_scored predicted=p / ilink;
run;

data test_scored;
    set test_scored;
    predicted_turnover = (p > 0.5);
    keep turnover predicted_turnover p;
run;



